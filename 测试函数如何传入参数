//测试函数如何传入参数
function  check(a,b,c){
  var a = a + 20;
  var b = [2];
  c.push(3);
}

var num = 20;
var arr0 = [0,0,0];
var arr1 = [1,1,1];

check(num,arr0,arr1);

console.log(num);//20
console.log(arr0);//[0, 0, 0]
console.log(arr1);//[1, 1, 1, 3]

/*Create 测试函数如何传入参数
函数如何传入参数？
在使用函数时，对于参数的传递有时候很困惑，到底是pass by value还是pass by referrence?
首先搞清楚按值传入和按引用传入两者有什么区别？-->1.按值传入，指代复制了一份副本，互相在函数内外不产生影响；2.按引用传入，指向一个地址（存放数据的地方），函数内部变量如果被修改，那么外侧的变量也被修改，因为指向同一地址。（简单可以理解成，按值传入是产生一个副本，互不影响。而按引入传入则是把原件给函数加工，那一被函数加工，原件直接修改。
分清了上面两者的关系，会发现，咦？js的函数参数传入怎么好像两者都不满足，反而像两者结合使用。。。。。
js的函数参数传入，可以总结以下两点：
1.当数据是原始数据类型时，传递原始值本身（call by value)；
2.当数据是引用数据类型给形参时，传递的是一个指针(call by sharing)；
注意：重新绑定和变异 （rebinding VS mutation）
当在函数内部，参数被直接赋值了新的值时（比如var b = [2];），则b不再指向arr0的存储的数据地址，重新绑定新的赋值；
当在函数内部，参数被修改时（比如c.push(3);），由于c和arr1都指向同一地址，所以被修改后，c和arr1指向的地址中数据被修改
*/
